{
    "collab_server" : "",
    "contents" : "#' Correlation Coefficients Panel\n#'\n#' @description\n#' Plot absolute correlation coefficients (pearson) into panel\n#' and adjust the text size according to the correlation\n#'\n#' @import graphics\n#' @import stats\n#'\n#' @param x numeric vector\n#' @param y numeric vector\n#' @param digits Number of digits the correlation will be displayed with (Default: 2)\n#' @param prefix Not yet documented\n#' @param cex.cor Not yet documented\n#' @param ... Additional parameters\n#'\n#' @return plot text element\npanel_cor <- function(x, y, digits = 2, prefix = \"\", cex.cor, ...) {\n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(0, 1, 0, 1))\n  r <- abs(cor(x, y))\n  txt <- format(c(r, 0.123456789), digits = digits)[1]\n  txt <- paste0(prefix, txt)\n  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * r)\n}\n\n\n#' Histogram Panel\n#'\n#' @description\n#' Plot histogram into diagonal panel of a numeric vector\n#'\n#' @import graphics\n#'\n#' @param x numeric vector\n#' @param ... Additional parameters\n#'\n#' @return histogram with colored bars\npanel_hist <- function(x, ...) {\n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(usr[1:2], 0, 1.5) )\n  h <- hist(x, plot = FALSE)\n  breaks <- h$breaks; nB <- length(breaks)\n  y <- h$counts; y <- y/max(y)\n  rect(breaks[-nB], 0, breaks[-1], y, col = \"#67000D\", ...)\n}\n\n#' Smooth Scatter Panel\n#'\n#' @description\n#' Plot a smoothScatter (color density of a scatter plot)\n#' with a loess fit.\n#'\n#' @import graphics\n#' @import grDevices\n#'\n#' @param x numeric vector\n#' @param y numeric vector\n#' @param bg Background (Default: NA)\n#' @param cex Not yet documented\n#' @param col.smooth Not yet documented\n#' @param span Not yet documented\n#' @param iter Not yet documented\n#' @param ... Additional parameters\n#'\n#' @return smoothed scatter plot\npanel_smoothScatter <- function (x, y, bg = NA,\n                                 cex = 1, col.smooth = \"red\",\n                                 span = 2/3, iter = 3, ...) {\n  # colors for the density\n  palette <- colorRampPalette(c(\"blue\", \"orange\", \"red\"))\n  s <- smoothScatter(x, y, colramp = palette, bg = bg, cex = cex, add=T)\n  ok <- is.finite(x) & is.finite(y)\n  if (any(ok))\n    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter),\n          col = col.smooth, ...)\n}\n\n\n#' Pairs Plot\n#'\n#' @description\n#' A matrix of plots is produced. The upper diagonal matrix\n#' consists of the correlation between pairs of variables. The\n#' lower diagonal matrix shows the scatter of each sample including\n#' a density overlay and a loess fit. Finally the diagonal shows a histogram\n#' of each of the input variables.\n#'\n#' @import graphics\n#' @import grDevices\n#'\n#' @param mat A matrix or a dataframe with numerical columns\n#' @param ... Additional parameters\n#'\n#' @return Plots a pairs plot on screen\n#'\n#' @examples\n#' data(iris)\n#' plot_pairs(iris[, 1:4])\n#'\n#' @export\nplot_pairs <- function(mat, ...) {\n  pairs(mat,\n       lower.panel = panel_smoothScatter,\n       upper.panel = panel_cor,\n       diag.panel  = panel_hist,\n       ...)\n}\n\n\n#' Plots a volcano plot.\n#'\n#' @description\n#' The plot does not aim to show any details about which genes or\n#' pathways are over/under represented, but is meant to show only\n#' the overall directionality of the genes between groups. If there\n#' is a certain perturbation in a system, the volcano plot may reveal\n#' a response in which there is a dramatic increase or decreased in\n#' transcription. In either case, we can get a better idea of the overall\n#' system by showing a volcano plot. Each gene is represented with its p-value\n#' as the x-axis and its (log2) fold change as the y-axis.\n#'\n#' @import ggplot2\n#' @import ggrepel\n#' @import dplyr\n#'\n#' @param data A data.frame which includes columns for -log10(p-values) and log2(foldchange)\n#' @param title The figure title\n#' @param groups A character vector with the treatment groups\n#' @param top_labeled A numeric value that controls how many samples should be highlighted based on their pvalue\n#' @param xlabel X-Axis Label\n#' @param ylabel Y-Axis Label\n#' @param xcutoff A numeric value for the -log10(p-value) cutoff\n#' @param ycutoff A numeric value for the log2(foldchange) cutoff\n#' @param log1p A flag to apply a log(1+x) transformation on the y axis to account for large values\n#'\n#' @return A ggplot2 figure\n#' @export\n#'\n#' @examples\n#' data(iPSC)\n#' volcano_plot(iPSC)\n#' volcano_plot(iPSC, groups=c(\"A\", \"B\"))\n#' volcano_plot(iPSC, top_labeled=10, xcutoff=c(-log2(2), log2(4)))\n#' volcano_plot(iPSC, top_labeled=10, log1p=TRUE)\nvolcano_plot <- function(data, title=\"Volcano Plot\",\n                                 groups=c(\"Untreated\", \"Treated\"),\n                                 top_labeled=0,\n                                 xlabel=expression(log[2](\"Foldchange\")),\n                                 ylabel=expression(-log[10](\"p-value\")),\n                                 xcutoff=c(-log2(4), log2(4)),\n                                 ycutoff=-log10(.05),\n                                 log1p=FALSE) {\n  if(is.null(groups)) {\n    groups <- \"\"\n  }\n  if(length(groups)!=2) {\n    warning(\"Number of group labels should be 2. No group colors applied!\")\n  }\n\n  data$fc <- log2(data$fc)\n  data$pvalue <- -log10(data$pvalue)\n\n  # Color corresponds to fold change directionality\n  fig <- ggplot() +\n    ggtitle(label = title) + # Add a title\n    xlab(xlabel) +  # x-axis label\n    ylab(ylabel) +  # y-axis label\n    geom_vline(xintercept = 0, colour = \"black\") + # add line at 0\n    geom_hline(yintercept = ycutoff, colour = \"black\") + # p(0.05) = 1.3\n    scale_x_continuous(limits = c(xcutoff[1]-2, xcutoff[2]+2)) +\n    theme_bw(base_size = 16) + # clean up theme\n    theme(legend.position = \"none\") # remove legend\n\n  if (length(groups)==2) {\n    ## Set group labels\n    data <- data %>%\n      mutate(color = ifelse(data$fc > 0 & data$pvalue > ycutoff,\n                            yes = groups[1],\n                            no = ifelse(data$fc < 0 & data$pvalue > ycutoff,\n                                        yes = groups[2],\n                                        no = \"none\")))\n\n    ## Color points by group\n    colors <- c(\"#E64B35\", \"#3182bd\", \"#636363\")\n    names(colors) <- c(groups[1], groups[2], \"none\")\n\n    fig <- fig +\n      geom_point(data=data, aes(x = fc, y = pvalue, color = factor(color)),\n                 size = 1.75, alpha = 0.8, na.rm = T) + # add gene points\n      annotate(geom = \"text\",\n               label = groups[1],\n               x = xcutoff[1], y = max(data$pvalue)+1,\n               size = 5, colour = \"black\") + # add Untreated text\n      annotate(geom = \"text\",\n               label = groups[2],\n               x = xcutoff[2], y = max(data$pvalue)+1,\n               size = 5, colour = \"black\") + # add Treated text\n      scale_color_manual(values = colors) # change colors\n  } else {\n    fig <- fig +\n      geom_point(data=data, aes(x = fc, y = pvalue),\n                 size = 1.75, alpha = 0.8, na.rm = T) + # Make dots bigger\n      scale_colour_gradient(low = \"black\", high = \"black\", guide = FALSE) # Color black\n  }\n\n  if(log1p) {\n    fig <- fig + scale_y_continuous(trans = \"log1p\") ## Apply log(1+x) transformation\n  }\n\n  ## Label top pvalue points by their id\n  if (top_labeled > 0) {\n    top_labeled <- top_n(data, n = top_labeled, wt = pvalue)\n    fig <- fig +\n      geom_text_repel(data = top_labeled,\n                      mapping = aes(x = fc, y = pvalue, label = id),\n                      size = 3,\n                      fontface = 'bold',\n                      color = 'black',\n                      box.padding = unit(0.5, \"lines\"),\n                      point.padding = unit(0.5, \"lines\"))\n  }\n  return(fig)\n}\n\n\n",
    "created" : 1490709072348.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3788888302",
    "id" : "F6BAF144",
    "lastKnownWriteTime" : 1490709041,
    "last_content_update" : 1490709041,
    "path" : "~/workspace/R/projects/BioViz/R/basic.R",
    "project_path" : "R/basic.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}